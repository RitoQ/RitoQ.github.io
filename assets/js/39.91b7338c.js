(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{632:function(s,a,t){"use strict";t.r(a);var e=t(2),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"spring知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring知识点"}},[s._v("#")]),s._v(" Spring知识点")]),s._v(" "),a("h2",{attrs:{id:"_1-spring是如何创建一个bean对象的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-spring是如何创建一个bean对象的"}},[s._v("#")]),s._v(" 1.Spring是如何创建一个Bean对象的")]),s._v(" "),a("p",[s._v("在java中如果你想创建一个对象，那必须基于一个类里的构造方法。所以在spring内部如果想创建一个Bean对象，首先就要利用到对象的无参构造方法，得到对象，再通过"),a("strong",[s._v("依赖注入")]),s._v("得到Bean对象")]),s._v(" "),a("p",[a("strong",[s._v("类—>推断构造方法—>普通对象—>依赖注入—>初始化前（@PostConstruct）—>初始化（InitializingBean）----\x3e初始化后（aop）—>代理对象—>放入Map单例池—>Bean对象")])]),s._v(" "),a("h3",{attrs:{id:"_1-1-推断构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-推断构造方法"}},[s._v("#")]),s._v(" 1 .1- 推断构造方法")]),s._v(" "),a("p",[s._v("在Spring中默认使用无参构造方法，在多个构造方法中，没有任何构造方法标注@Autowired注解情况下，默认寻找无参构造方法，若找不到则报错。在多个构造方法中，若有某个构造方法标注@Autowired注解，则使用该构造方法创建对象")]),s._v(" "),a("h3",{attrs:{id:"_1-2-依赖注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-依赖注入"}},[s._v("#")]),s._v(" 1.2 - 依赖注入")]),s._v(" "),a("p",[s._v("在Spring创建了当前对象后,会利用反射对当前对象的属性进行赋值，赋值的前提是属性标注例如@Autowired，然后根据当前对象的类型去单例池寻找，如果利用类型找不到再根据名字去单例池寻找，如果两个形式都找不到则报错。")]),s._v(" "),a("h3",{attrs:{id:"_1-3-初始化前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-初始化前"}},[s._v("#")]),s._v(" 1.3 - 初始化前")]),s._v(" "),a("p",[s._v("Spring提供了@PostConstruct注解,被标注的方法会执行。")]),s._v(" "),a("p",[s._v("在userSerice中增加user属性")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Component")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OrderService")]),s._v(" orderService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" admin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("orderService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("类中的user是管理员用户，一般情况下，管理员只有一个，如果希望在getBean获取userService之后，其中的admin属性就是有值的。\n现在获取到的是空值，希望可以获取到数据中存储的admin的信息。")]),s._v(" "),a("p",[s._v("这里呢，有小伙伴说，可以在userService中的admin上面加上Autowired注解，然后在User类上加上Component注解当做一个bean对象不就可以自动注入了么？\n这样做，admin属性是会有值，但是spring相当于只做了个 new User()的动作，并不是我们希望的数据库中的值。")]),s._v(" "),a("p",[s._v("可以再深入思考下，对于spring来说，怎么知道要查哪个表？查哪个字段？等这些信息\n这些其实spring都是不知道的，只有程序员自己知道，所以这个时候就需要提供一个方法，在方法中自己去执行SQL查询管理员信息。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OrderService")]),s._v(" orderService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" admin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//mysql--管理员信息---user对象--admin")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("orderService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("有了方法之后，spring就可以去调用该方法去执行了（也就是在创建bean的过程中，自动调用service中的a方法）。\nuserService -----\x3e推断构造方法 -----\x3e 对象-----\x3e 依赖注入-----\x3e初始化前（a()）-----\x3e初始化-----\x3e初始化后-----\x3e放入单例池map （若是多例bean，则不需要该步骤）-----\x3espring内部一些其他步骤-----\x3eBean 对象")]),s._v(" "),a("p",[s._v("现在最主要的就是，spring怎么知道需要在初始化前调用a方法呢？service中可能有很多方法， spring怎么确定呢？敲代码的小伙伴就要想办法让a方法变得更特殊一点，那么实现呢？其实也很简单，Spring中有提供注解@PostConstruct")]),s._v(" "),a("p",[s._v("pirng在执行到初始化前时会去找前面生成对象里面有没有存在用PostConstruct注解修饰的方法，然后用反射的方式执行这些方法\nuserService -----\x3e 推断构造方法 -----\x3e 对象-----\x3e 依赖注入-----\x3e初始化前（@PostConstruct）-----\x3e初始化-----\x3e初始化后-----\x3e放入单例池map （若是多例bean，则不需要该步骤）-----\x3espring内部一些其他步骤-----\x3eBean 对象")]),s._v(" "),a("h3",{attrs:{id:"_1-4-初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-初始化"}},[s._v("#")]),s._v(" 1.4 - 初始化")]),s._v(" "),a("p",[s._v("当前对象是否实现了InitializingBean接口，Spring源码中会判断当前对象是否实现了此接口源码")]),s._v(" "),a("p",[s._v("``boolean isInitiallizingBean = (Bean instanceof InitializingBean);`\n若实现了此接口，Spring会将当前对象转换为InitializingBean对象然后执行afterPropertiesSet()方法")]),s._v(" "),a("h3",{attrs:{id:"_1-5-初始化后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-初始化后"}},[s._v("#")]),s._v(" 1.5 - 初始化后")]),s._v(" "),a("p",[s._v("在初始化后会生成一个代理对象，那么放入单例池里的到底是普通对象还是代理对象呢？")]),s._v(" "),a("p",[s._v("这要看你有没有使用aop产生代理对象，如果有，那么将代理对象放入单例池，如果没有则只放入普通对象")]),s._v(" "),a("h3",{attrs:{id:"_1-6-单例池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-单例池"}},[s._v("#")]),s._v(" 1.6 - 单例池")]),s._v(" "),a("p",[s._v("对于userService而言，默认情况下是一个单例bean，那么单例得bean体现的效果是什么样子呢？")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserService")]),s._v(" userService "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("applicationContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"userService"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserService")]),s._v(" userService1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("applicationContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"userService"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserService")]),s._v(" userService2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("applicationContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getBean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"userService"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("通过getBean获取三次bean，最终返回的结果是同一个对象（指向同一个地址）")]),s._v(" "),a("p",[s._v("这在底层使用的是map结构，保证key唯一")]),s._v(" "),a("p",[s._v("在"),a("code",[s._v("getBean()")]),s._v("时先从map中找是否存在需要的对象，有的话就直接返回，所以一个名字对应一个对象，相同名称会返回相同的对象。")]),s._v(" "),a("p",[s._v("如果没有找到，那么就需要创建一个对象了，再把创建好的对象放入map中，之后就可以直接获取了。")]),s._v(" "),a("h2",{attrs:{id:"_2-java对象和普通对象之间有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-java对象和普通对象之间有什么区别"}},[s._v("#")]),s._v(" 2.Java对象和普通对象之间有什么区别")]),s._v(" "),a("p",[s._v("其实通过无参构造方法创建出的对象和最终生成的bean对象，大部分情况下"),a("strong",[s._v("二者是同一个对象，只不过是处于不同时期而已。")])]),s._v(" "),a("h2",{attrs:{id:"_3-bean的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-bean的生命周期"}},[s._v("#")]),s._v(" 3.Bean的生命周期")]),s._v(" "),a("p",[s._v("Bean 容器找到配置文件中 Spring Bean 的定义。")]),s._v(" "),a("p",[s._v("Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。")]),s._v(" "),a("p",[s._v("如果涉及到一些属性值 利用 "),a("code",[s._v("set()")]),s._v("方法设置一些属性值。")]),s._v(" "),a("p",[s._v("如果 Bean 实现了 "),a("code",[s._v("BeanNameAware")]),s._v(" 接口，调用 "),a("code",[s._v("setBeanName()")]),s._v("方法，传入 Bean 的名字。")]),s._v(" "),a("p",[s._v("如果 Bean 实现了 "),a("code",[s._v("BeanClassLoaderAware")]),s._v(" 接口，调用 "),a("code",[s._v("setBeanClassLoader()")]),s._v("方法，传入 "),a("code",[s._v("ClassLoader")]),s._v("对象的实例。")]),s._v(" "),a("p",[s._v("如果 Bean 实现了 "),a("code",[s._v("BeanFactoryAware")]),s._v(" 接口，调用 "),a("code",[s._v("setBeanFactory()")]),s._v("方法，传入 "),a("code",[s._v("BeanFactory")]),s._v("对象的实例。")]),s._v(" "),a("p",[s._v("与上面的类似，如果实现了其他 "),a("code",[s._v("*.Aware")]),s._v("接口，就调用相应的方法。")]),s._v(" "),a("p",[s._v("如果有和加载这个 Bean 的 Spring 容器相关的 "),a("code",[s._v("BeanPostProcessor")]),s._v(" 对象，执行"),a("code",[s._v("postProcessBeforeInitialization()")]),s._v(" 方法")]),s._v(" "),a("p",[s._v("如果 Bean 实现了"),a("code",[s._v("InitializingBean")]),s._v("接口，执行"),a("code",[s._v("afterPropertiesSet()")]),s._v("方法。")]),s._v(" "),a("p",[s._v("如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。")]),s._v(" "),a("p",[s._v("如果有和加载这个 Bean 的 Spring 容器相关的 "),a("code",[s._v("BeanPostProcessor")]),s._v(" 对象，执行"),a("code",[s._v("postProcessAfterInitialization()")]),s._v(" 方法")]),s._v(" "),a("p",[s._v("当要销毁 Bean 的时候，如果 Bean 实现了 "),a("code",[s._v("DisposableBean")]),s._v(" 接口，执行 "),a("code",[s._v("destroy()")]),s._v(" 方法。")]),s._v(" "),a("p",[s._v("当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://images.xiaozhuanlan.com/photo/2019/b5d264565657a5395c2781081a7483e1.jpg",alt:"Spring Bean 生命周期"}})]),s._v(" "),a("h2",{attrs:{id:"_4-autowired-和-resource-的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-autowired-和-resource-的区别是什么"}},[s._v("#")]),s._v(" 4.@Autowired 和 @Resource 的区别是什么？")]),s._v(" "),a("p",[a("code",[s._v("Autowired")]),s._v(" 属于 Spring 内置的注解，默认的注入方式为"),a("code",[s._v("byType")]),s._v("（根据类型进行匹配），也就是说会优先根据接口类型去匹配并注入 Bean （接口的实现类）。")]),s._v(" "),a("p",[a("strong",[s._v("这会有什么问题呢？")]),s._v(" 当一个接口存在多个实现类的话，"),a("code",[s._v("byType")]),s._v("这种方式就无法正确注入对象了，因为这个时候 Spring 会同时找到多个满足条件的选择，默认情况下它自己不知道选择哪一个。")]),s._v(" "),a("p",[s._v("这种情况下，注入方式会变为 "),a("code",[s._v("byName")]),s._v("（根据名称进行匹配），这个名称通常就是类名（首字母小写）。就比如说下面代码中的 "),a("code",[s._v("smsService")]),s._v(" 就是我这里所说的名称，这样应该比较好理解了吧。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// smsService 就是我们上面所说的名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("举个例子，"),a("code",[s._v("SmsService")]),s._v(" 接口有两个实现类: "),a("code",[s._v("SmsServiceImpl1")]),s._v("和 "),a("code",[s._v("SmsServiceImpl2")]),s._v("，且它们都已经被 Spring 容器所管理。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错，byName 和 byType 都无法匹配到 bean")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确注入 SmsServiceImpl1 对象对应的 bean")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsServiceImpl1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确注入  SmsServiceImpl1 对象对应的 bean")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// smsServiceImpl1 就是我们上面所说的名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Qualifier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"smsServiceImpl1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("我们还是建议通过 "),a("code",[s._v("@Qualifier")]),s._v(" 注解来显式指定名称而不是依赖变量的名称。")]),s._v(" "),a("p",[a("code",[s._v("@Resource")]),s._v("属于 JDK 提供的注解，默认注入方式为 "),a("code",[s._v("byName")]),s._v("。如果无法通过名称匹配到对应的 Bean 的话，注入方式会变为"),a("code",[s._v("byType")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("@Resource")]),s._v(" 有两个比较重要且日常开发常用的属性："),a("code",[s._v("name")]),s._v("（名称）、"),a("code",[s._v("type")]),s._v("（类型）.")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Resource")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("如果仅指定 "),a("code",[s._v("name")]),s._v(" 属性则注入方式为"),a("code",[s._v("byName")]),s._v("，如果仅指定"),a("code",[s._v("type")]),s._v("属性则注入方式为"),a("code",[s._v("byType")]),s._v("，如果同时指定"),a("code",[s._v("name")]),s._v(" 和"),a("code",[s._v("type")]),s._v("属性（不建议这么做）则注入方式为"),a("code",[s._v("byType")]),s._v("+"),a("code",[s._v("byName")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错，byName 和 byType 都无法匹配到 bean")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Resource")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确注入 SmsServiceImpl1 对象对应的 bean")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Resource")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsServiceImpl1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 正确注入 SmsServiceImpl1 对象对应的 bean（比较推荐这种方式）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Resource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"smsServiceImpl1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SmsService")]),s._v(" smsService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("简单总结一下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("@Autowired")]),s._v(" 是 Spring 提供的注解，"),a("code",[s._v("@Resource")]),s._v(" 是 JDK 提供的注解。")]),s._v(" "),a("li",[a("code",[s._v("Autowired")]),s._v(" 默认的注入方式为"),a("code",[s._v("byType")]),s._v("（根据类型进行匹配），"),a("code",[s._v("@Resource")]),s._v("默认注入方式为 "),a("code",[s._v("byName")]),s._v("（根据名称进行匹配）。")]),s._v(" "),a("li",[s._v("当一个接口存在多个实现类的情况下，"),a("code",[s._v("@Autowired")]),s._v(" 和"),a("code",[s._v("@Resource")]),s._v("都需要通过名称才能正确匹配到对应的 Bean。"),a("code",[s._v("Autowired")]),s._v(" 可以通过 "),a("code",[s._v("@Qualifier")]),s._v(" 注解来显式指定名称，"),a("code",[s._v("@Resource")]),s._v("可以通过 "),a("code",[s._v("name")]),s._v(" 属性来显式指定名称。")])]),s._v(" "),a("h2",{attrs:{id:"_5-aop的底层是怎么工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-aop的底层是怎么工作的"}},[s._v("#")]),s._v(" 5.AOP的底层是怎么工作的")]),s._v(" "),a("p",[s._v("首先对于AOP中的一些概念我们需要做一些回顾")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("Aspect")]),s._v("（切面）： Aspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Joint point")]),s._v("（连接点）：表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常*处理程序块的执行等等，它自身还可以嵌套其它 joint point。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Pointcut")]),s._v("（切点）：表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Advice")]),s._v("（增强）：Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Target")]),s._v("（目标对象）：织入 Advice 的目标对象.。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("Weaving")]),s._v("（织入）：将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程")])])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("持续更新中")])])])}),[],!1,null,null,null);a.default=n.exports}}]);